{"version":3,"sources":["context/data.tsx","utils/MapHelper.ts","loading.png","models/AvroSchema.ts","components/DataType.tsx","utils/TagColorPicker.ts","utils/StringExtentions.ts","utils/TypeHelper.ts","models/TableColumns.tsx","utils/TagHelper.tsx","All.tsx","components/Enum.tsx","utils/AvroTypeHelper.ts","utils/CustomAvroParser.ts","components/Record.tsx","error.png","Item.tsx","components/AppFooter.tsx","components/logo.png","components/AppHeader.tsx","components/AppLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DataActions","MapHelper","map","jsonObject","forEach","value","key","Map","set","initialState","namespaceTree","schemas","failure","reducer","state","action","type","SetData","data","payload","Error","DataContext","createContext","DataProvider","props","useReducer","appData","dispatch","useMemo","readSchemas","a","jsonToMap","NamespaceTree","AllSchemaSummary","error","console","log","useEffect","Provider","children","useDataContext","context","useContext","undefined","PrimitiveTypes","ComplexTypes","DataType","color","title","tooltip","mouseEnterDelay","path","to","text","NullType","TagColorPicker","BOOLEAN","BYTES","DOUBLE","FLOAT","INT","LONG","STRING","UNION","RECORD","ENUM","ARRAY","MAP","complexType","StringExtentions","baseString","maxLength","str","length","substr","TypeHelper","record","toUpperCase","namedType","FIXED","name","truncateWithEllipsis","doc","namespace","sourceItemName","defaultNamespace","arrayType","formatTag","items","logicalType","IndexColumns","dataIndex","width","render","className","style","textAlign","linkTarget","RecordColumns","Math","random","pick","toString","tagData","Array","type1","type2","TagHelper","values","EnumColumns","option","default","offset","count","backgroundColor","All","i","src","loading","alt","bordered","rowKey","columns","dataSource","pagination","defaultPageSize","hideOnSinglePage","simple","scroll","y","scrollToFirstRowOnChange","Enum","schema","enumName","substring","lastIndexOf","rows","symbols","symbol","padding","tags","paddingLeft","AvroTypeHelper","CustomAvroParser","schemaContent","JSON","parse","outMap","parentNamespace","isRecordType","fields","has","addNamespaceIfNeeded","field","extractExternalTypes","isEnumType","isArrayType","isUnion","unionType","childUnionType","isMapType","mapType","Record","current","baseNamespace","externalTypes","base","indexOf","get","index","defaultValue","stringify","Item","item","useParams","useState","setSchema","setError","source","URLSearchParams","useLocation","search","filePath","replaceAll","fetchSchema","fetch","process","headers","fetchedSchema","getNamedTypes","errorImage","fontWeight","AppFooter","Footer","Layout","borderTop","AppHeader","Header","Option","Select","OptGroup","history","useHistory","location","float","logo","marginRight","showSearch","placeholder","onSelect","push","onChange","pathname","allowClear","defaultActiveFirstOption","disabled","filterOption","input","toLowerCase","from","keys","label","val","AppLayout","Content","Sider","SubMenu","Menu","height","mode","theme","forceSubMenuRender","inlineCollapsed","defaultSelectedKeys","defaultOpenKeys","child","childKey","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13d66d22.chunk.js","sourcesContent":["import React, { createContext, useContext, useMemo, useEffect, useReducer } from \"react\";\r\nimport AllSchemaSummary from \"../all-schemas-summary.json\";\r\nimport { NamedType } from \"../models/AvroSchema\";\r\nimport NamespaceTree from \"../namespace-tree.json\";\r\nimport { MapHelper } from \"../utils/MapHelper\";\r\n\r\ninterface ContextState {\r\n    namespaceTree: Map<string, string[]>;\r\n    schemas: NamedType[];\r\n    failure: string;\r\n}\r\n\r\nexport enum DataActions {\r\n    SetData,\r\n}\r\n\r\ninterface Action {\r\n    type: DataActions;\r\n    payload: ContextState;\r\n}\r\n\r\n\r\nconst initialState = {\r\n    namespaceTree: new Map(),\r\n    schemas: [],\r\n    failure: \"\",\r\n};\r\n\r\nfunction reducer(state: ContextState, action: Action): ContextState {\r\n    switch (action.type) {\r\n    case DataActions.SetData: {\r\n        const data = action.payload as ContextState;\r\n        return {\r\n            ...state,\r\n            ...data,\r\n        };\r\n    }\r\n    default:\r\n        throw new Error(\"Unknown Action!\");\r\n    }\r\n}\r\n\r\nconst DataContext = createContext<[ContextState, React.Dispatch<Action>]>(\r\n    [initialState, (): undefined => undefined],\r\n);\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const DataProvider = (props: any): JSX.Element => {\r\n    const [appData, dispatch] = useReducer(reducer, initialState);\r\n    const value = useMemo(() => [appData, dispatch], [appData, dispatch]);\r\n\r\n    const readSchemas = async () => {\r\n        try {\r\n            dispatch({\r\n                type: DataActions.SetData, payload: {\r\n                    namespaceTree: MapHelper.jsonToMap(NamespaceTree) as Map<string, string[]>,\r\n                    schemas: AllSchemaSummary,\r\n                    failure: \"\",\r\n                },\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch({\r\n                type: DataActions.SetData, payload: {\r\n                    namespaceTree: new Map(),\r\n                    schemas: [],\r\n                    failure: \"Failed loading schema tree!\",\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect((): any => {\r\n        readSchemas();\r\n    }, []);\r\n\r\n    return (\r\n        <DataContext.Provider value={value} {...props}>\r\n            {props.children}\r\n        </DataContext.Provider>\r\n    );\r\n};\r\n\r\nexport function useDataContext(): [ContextState, React.Dispatch<Action>] {\r\n    const context = useContext(DataContext);\r\n    if (context === undefined) {\r\n        throw new Error(\"DataContext must be used within a DataProvider\");\r\n    }\r\n    return context;\r\n}\r\n","export class MapHelper {\r\n\r\n    public static mapToJsonObject(map: Map<string, unknown>): Record<string, unknown> {\r\n        const jsonObject = {};\r\n        map.forEach((value, key) => {\r\n            jsonObject[key] = value;\r\n        });\r\n\r\n        return jsonObject;\r\n    }\r\n\r\n    public static jsonToMap(jsonObject: Record<string, unknown>): Map<string, unknown> {\r\n        const map = new Map<string, unknown>();\r\n        for (const value in jsonObject) {\r\n            map.set(value, jsonObject[value]);\r\n        }\r\n\r\n        return map;\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loading.390b818e.png\";","export type ComplexType = RecordType | EnumType | ArrayType | MapType | UnionType | FixedType;\r\nexport type PrimitiveType = null | boolean | number | string | Record<string, unknown> | unknown[];\r\nexport type Type = ComplexType | PrimitiveType;\r\n\r\nexport type FieldDefaultValueType = string | number | null | boolean | Record<string, unknown> | any[];\r\n\r\nexport const NullType = \"null\";\r\nexport enum PrimitiveTypes {\r\n    BOOLEAN = \"boolean\",\r\n    INT = \"int\",\r\n    LONG = \"long\",\r\n    FLOAT = \"float\",\r\n    DOUBLE = \"double\",\r\n    BYTES = \"bytes\",\r\n    STRING = \"string\",\r\n}\r\n\r\nexport enum ComplexTypes {\r\n    ARRAY = \"array\",\r\n    ENUM = \"enum\",\r\n    FIXED = \"fixed\",\r\n    MAP = \"map\",\r\n    RECORD = \"record\",\r\n    UNION = \"union\",\r\n}\r\n\r\nexport type TypeNames = ComplexTypes | string;\r\nexport interface AvroSchema {\r\n    type: TypeNames;\r\n}\r\n\r\nexport interface NamedType extends AvroSchema {\r\n    name: string;\r\n    namespace: string;\r\n    aliases: string[];\r\n    doc: string;\r\n}\r\n\r\nexport interface SimpleNamedType extends NamedType {\r\n    type: string;\r\n}\r\n\r\nexport interface Field {\r\n    name: string;\r\n    doc: string;\r\n    type: Type;\r\n    aliases: string[];\r\n    default: FieldDefaultValueType;\r\n}\r\n\r\nexport interface RecordType extends NamedType {\r\n    type: ComplexTypes.RECORD;\r\n    fields: Field[];\r\n}\r\n\r\nexport interface EnumType extends NamedType {\r\n    type: ComplexTypes.ENUM;\r\n    symbols: string[];\r\n    default: string;\r\n}\r\n\r\nexport interface FixedType extends NamedType {\r\n    type: ComplexTypes.FIXED;\r\n    size: number;\r\n}\r\n\r\nexport interface UnionType extends AvroSchema {\r\n    type: ComplexTypes.UNION;\r\n    types: Type[];\r\n}\r\n\r\nexport interface ArrayType extends AvroSchema {\r\n    type: ComplexTypes.ARRAY;\r\n    items: Type;\r\n}\r\n\r\nexport interface MapType extends AvroSchema {\r\n    type: ComplexTypes.MAP;\r\n    values: Type;\r\n}\r\n\r\nexport interface LogicalType extends AvroSchema {\r\n    type: string;\r\n    logicalType: string;\r\n}\r\n","import { Tag, Tooltip } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport interface TagData {\r\n    text: string;\r\n    tooltip: string;\r\n    path?: string;\r\n}\r\n\r\ninterface PropsType {\r\n    data: TagData;\r\n    color: string;\r\n}\r\n\r\nconst DataType = (props: PropsType): JSX.Element => {\r\n    const { data, color } = props;\r\n\r\n    return (\r\n        <Tooltip title={data.tooltip} mouseEnterDelay={0.4}>\r\n            <Tag color={color}>\r\n                {data.path ? <Link to={`/${data.path}`}>{data.text}</Link> : data.text}\r\n            </Tag>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nexport default DataType;\r\n","import { NullType, PrimitiveTypes, ComplexTypes, Type, ComplexType } from \"../models/AvroSchema\";\r\n\r\n\r\nexport class TagColorPicker {\r\n\r\n    public static pick(type: Type): string {\r\n        try {\r\n            if (!type) {\r\n                return \"grey\";\r\n            }\r\n\r\n            switch (type) {\r\n            case NullType:\r\n                return \"red\";\r\n            case PrimitiveTypes.BOOLEAN:\r\n            case PrimitiveTypes.BYTES:\r\n            case PrimitiveTypes.DOUBLE:\r\n            case PrimitiveTypes.FLOAT:\r\n            case PrimitiveTypes.INT:\r\n            case PrimitiveTypes.LONG:\r\n            case PrimitiveTypes.STRING:\r\n                return \"blue\";\r\n            case ComplexTypes.UNION:\r\n                return \"orange\";\r\n            case ComplexTypes.RECORD:\r\n                return \"geekblue\";\r\n            case ComplexTypes.ENUM:\r\n                return \"purple\";\r\n            case ComplexTypes.ARRAY:\r\n                return \"green\";\r\n            case ComplexTypes.MAP:\r\n                return \"volcano\";\r\n            case \"magenta\":\r\n            case \"lime\":\r\n            case \"cyan\":\r\n            case \"gold\":\r\n            }\r\n\r\n\r\n            const complexType = type as ComplexType;\r\n\r\n            if (!complexType.type) {\r\n                return \"grey\";\r\n            }\r\n\r\n            switch (complexType.type) {\r\n            case ComplexTypes.UNION:\r\n                return \"orange\";\r\n            case ComplexTypes.RECORD:\r\n                return \"geekblue\";\r\n            case ComplexTypes.ENUM:\r\n                return \"purple\";\r\n            case ComplexTypes.ARRAY:\r\n                return \"green\";\r\n            }\r\n        } catch (error) {\r\n            console.error(type, error);\r\n        }\r\n\r\n        return \"grey\";\r\n    }\r\n}\r\n","export class StringExtentions {\r\n    public static truncateWithEllipsis(baseString: string, maxLength: number): string {\r\n        if (!baseString) {\r\n            return \"\";\r\n        }\r\n        let str = baseString;\r\n\r\n        if (str.length > maxLength) {\r\n            str = `${str.substr(0, maxLength)}...`;\r\n        }\r\n\r\n        return str;\r\n    }\r\n}\r\n","import { TagData } from \"../components/DataType\";\r\nimport { ComplexType, ComplexTypes, LogicalType, NamedType, NullType, PrimitiveTypes, Type } from \"../models/AvroSchema\";\r\nimport { RowData } from \"../models/TableColumns\";\r\nimport { StringExtentions } from \"./StringExtentions\";\r\n\r\nexport class TypeHelper {\r\n\r\n    public static formatTag(type: Type, record: RowData): TagData {\r\n        switch (type) {\r\n        case NullType:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"no value\",\r\n            };\r\n        case PrimitiveTypes.BOOLEAN:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"a binary value\",\r\n            };\r\n        case PrimitiveTypes.INT:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"32-bit signed integer\",\r\n            };\r\n        case PrimitiveTypes.LONG:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"64-bit signed integer\",\r\n            };\r\n        case PrimitiveTypes.FLOAT:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"single precision (32-bit) IEEE 754 floating-point number\",\r\n            };\r\n        case PrimitiveTypes.DOUBLE:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"double precision (64-bit) IEEE 754 floating-point number\",\r\n            };\r\n        case PrimitiveTypes.BYTES:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"sequence of 8-bit unsigned bytes\",\r\n            };\r\n        case PrimitiveTypes.STRING:\r\n            return {\r\n                text: type.toUpperCase(),\r\n                tooltip: \"unicode character sequence\",\r\n            };\r\n        }\r\n\r\n        const namedType = type as NamedType;\r\n        const complexType = type as ComplexType;\r\n\r\n        switch (namedType.type) {\r\n        case ComplexTypes.FIXED:\r\n        case ComplexTypes.RECORD:\r\n        case ComplexTypes.ENUM:\r\n            return {\r\n                text: namedType.name,\r\n                tooltip: StringExtentions.truncateWithEllipsis(namedType.doc, 500),\r\n                path: namedType.namespace && namedType.namespace.length ? `${namedType.namespace}.${namedType.name}?source=${record.sourceItemName}` : `${record.defaultNamespace}.${namedType.name}?source=${record.sourceItemName}`,\r\n            };\r\n        }\r\n\r\n        if (complexType.type === ComplexTypes.ARRAY) {\r\n            const arrayType = TypeHelper.formatTag(complexType.items, record);\r\n            return {\r\n                text: arrayType.text,\r\n                tooltip: arrayType.tooltip,\r\n                path: arrayType.path,\r\n            };\r\n        } else if (complexType.type === ComplexTypes.MAP) {\r\n            return {\r\n                text: complexType.type.toUpperCase(),\r\n                tooltip: \"\",\r\n                path: \"\",\r\n            };\r\n        } else if ((complexType as unknown as LogicalType).logicalType && (complexType as unknown as LogicalType).logicalType.length) {\r\n            return {\r\n                text: (complexType as unknown as LogicalType).logicalType,\r\n                tooltip: \"Logical Type\",\r\n                path: \"\",\r\n            };\r\n        }\r\n\r\n        // Workaround for reused types. This will print the type but without a link\r\n        if (typeof type === \"string\") {\r\n            return {\r\n                text: type,\r\n                tooltip: \"\",\r\n                path: \"\",\r\n            };\r\n        }\r\n\r\n        return {\r\n            text: \"TYPE IS UNKNOWN\",\r\n            tooltip: \"\",\r\n            path: \"\",\r\n        };\r\n    }\r\n}\r\n","import { Badge, Tag } from \"antd\";\r\nimport React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TagHelper } from \"../utils/TagHelper\";\r\nimport { NamedType } from \"./AvroSchema\";\r\n\r\nexport interface RowData {\r\n    // Used for reference of origin scheam\r\n    sourceItemName: string;\r\n    // This is only used when namespace is undefuned in type because namespace is the same as parent\r\n    defaultNamespace: string;\r\n    name: string;\r\n    type: any;\r\n    defaultValue: any;\r\n    doc: string;\r\n}\r\n\r\ninterface Option {\r\n    title: string;\r\n    default: boolean;\r\n}\r\n\r\nexport interface EnumData {\r\n    option: Option;\r\n    key: string;\r\n}\r\n\r\nexport const IndexColumns = [\r\n    {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        width: 350,\r\n        render: (text: string, record: NamedType): JSX.Element => (\r\n            <Link to={`/${record.namespace}.${text}`}>{text}</Link>\r\n        ),\r\n    },\r\n    {\r\n        title: \"Type\",\r\n        dataIndex: \"type\",\r\n        width: 100,\r\n        className: \"all-type-column\",\r\n        render:  (text: string): JSX.Element => (\r\n            <Tag style={{ textAlign: \"center\" }}>\r\n                <strong>{text.toUpperCase()}</strong>\r\n            </Tag>\r\n        ),\r\n    },\r\n    {\r\n        title: \"Documentation\",\r\n        dataIndex: \"doc\",\r\n        className: \"all-doc-column\",\r\n        render: (text: string): JSX.Element => <ReactMarkdown linkTarget=\"_blank\">{text}</ReactMarkdown>,\r\n    },\r\n];\r\n\r\nexport const RecordColumns = [\r\n    {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n    },\r\n    {\r\n        title: \"Data Type\",\r\n        dataIndex: \"type\",\r\n        key: \"type\",\r\n        width: 250,\r\n        render: TagHelper.render,\r\n    },\r\n    {\r\n        title: \"Default\",\r\n        dataIndex: \"defaultValue\",\r\n        key: \"default\",\r\n    },\r\n    {\r\n        title: \"Documentation\",\r\n        dataIndex: \"doc\",\r\n        key: \"docs\",\r\n        render: (text: string): JSX.Element => <ReactMarkdown linkTarget=\"_blank\">{text}</ReactMarkdown>,\r\n    },\r\n];\r\n\r\nexport const EnumColumns = [\r\n    {\r\n        title: \"Options\",\r\n        dataIndex: \"option\",\r\n        key: \"option\",\r\n        render: (option: Option): JSX.Element => (\r\n            <>\r\n                <span>{option.title}</span>\r\n                {option.default ? <Badge offset={[40, 0]} count={\"deserialization default value\"} style={{ backgroundColor: \"#108ee9\" }} /> : null}\r\n            </>\r\n\r\n        ),\r\n\r\n    },\r\n];\r\n","import React, { Fragment } from \"react\";\r\nimport DataType from \"../components/DataType\";\r\nimport { ArrayType, ComplexType, ComplexTypes, LogicalType, MapType, NullType, PrimitiveTypes, Type } from \"../models/AvroSchema\";\r\nimport { RowData } from \"../models/TableColumns\";\r\nimport { TagColorPicker } from \"./TagColorPicker\";\r\nimport { TypeHelper } from \"./TypeHelper\";\r\n\r\nexport class TagHelper {\r\n\r\n    public static render(type: Type, record: RowData): JSX.Element {\r\n        const key = Math.random();\r\n\r\n        switch (type) {\r\n        case NullType:\r\n        case PrimitiveTypes.BOOLEAN:\r\n        case PrimitiveTypes.BYTES:\r\n        case PrimitiveTypes.DOUBLE:\r\n        case PrimitiveTypes.FLOAT:\r\n        case PrimitiveTypes.INT:\r\n        case PrimitiveTypes.LONG:\r\n        case PrimitiveTypes.STRING:\r\n            return (\r\n                <DataType\r\n                    color={TagColorPicker.pick(type)}\r\n                    key={key.toString()}\r\n                    data={TypeHelper.formatTag(type, record)}\r\n                />\r\n            );\r\n\r\n        case ComplexTypes.RECORD:\r\n        case ComplexTypes.ENUM:\r\n        case ComplexTypes.FIXED:\r\n            return (\r\n                <DataType\r\n                    color={TagColorPicker.pick((type as unknown as ComplexType).type)}\r\n                    key={key.toString()}\r\n                    data={TypeHelper.formatTag(type, record)}\r\n                />\r\n            );\r\n        }\r\n\r\n        const complexType = type as ComplexType;\r\n\r\n        if (!complexType) {\r\n            return <></>;\r\n        }\r\n\r\n        if (complexType.type === ComplexTypes.RECORD || complexType.type === ComplexTypes.ENUM || complexType.type === ComplexTypes.FIXED) {\r\n            return (\r\n                <DataType\r\n                    color={TagColorPicker.pick(complexType.type)}\r\n                    key={key.toString()}\r\n                    data={TypeHelper.formatTag(type, record)}\r\n                />\r\n            );\r\n        } else if (complexType.type === ComplexTypes.ARRAY) {\r\n            const tagData = TypeHelper.formatTag((complexType as ArrayType).items, record);\r\n            tagData.text = `ARRAY<${tagData.text}>`;\r\n            return (\r\n                <DataType\r\n                    color={TagColorPicker.pick((complexType as ArrayType).type)}\r\n                    key={key.toString()}\r\n                    data={tagData}\r\n                />\r\n            );\r\n        } else if (complexType instanceof Array) { // This is UNION\r\n            const type1 = complexType[0];\r\n            const type2 = complexType[1];\r\n\r\n            return (\r\n                <Fragment key={key.toString()}>\r\n                    {\r\n                        TagHelper.render(type1, record)\r\n                    }\r\n                    OR&nbsp;&nbsp;\r\n                    {\r\n                        TagHelper.render(type2, record)\r\n                    }\r\n                </Fragment>\r\n            );\r\n        } else if (complexType.type === ComplexTypes.MAP) {\r\n            const tagData = TypeHelper.formatTag((complexType as MapType).values, record);\r\n            tagData.text = `MAP<${tagData.text}>`;\r\n            return (\r\n                <DataType\r\n                    color={TagColorPicker.pick((complexType as MapType).type)}\r\n                    key={key.toString()}\r\n                    data={tagData}\r\n                />\r\n            );\r\n        } else if ((complexType as unknown as LogicalType).logicalType && (complexType as unknown as LogicalType).logicalType.length) {\r\n            return (\r\n                <DataType\r\n                    color={TagColorPicker.pick(complexType.type)}\r\n                    key={key.toString()}\r\n                    data={TypeHelper.formatTag(type, record)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <DataType\r\n                color={TagColorPicker.pick(complexType.type)}\r\n                key={key.toString()}\r\n                data={TypeHelper.formatTag(type, record)}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { Table } from \"antd\";\r\nimport { useDataContext } from \"./context/data\";\r\nimport loading from \"./loading.png\";\r\nimport { IndexColumns } from \"./models/TableColumns\";\r\n\r\nconst All = (): JSX.Element => {\r\n    let i = 0;\r\n    const [appData] = useDataContext();\r\n\r\n    if (appData.failure.length > 0) {\r\n        return <p>Failed Loading Schemas</p>;\r\n    }\r\n\r\n    if (appData.schemas.length === 0) {\r\n        return <img src={loading} className=\"App-logo\" alt=\"loading...\" />;\r\n    }\r\n\r\n    return (\r\n        <Table\r\n            bordered\r\n            rowKey={() => (i++)}\r\n            columns={IndexColumns}\r\n            dataSource={appData.schemas}\r\n            pagination={{ defaultPageSize: 50, hideOnSinglePage: true, simple: true }}\r\n            scroll={{ y: \"82vh\", scrollToFirstRowOnChange: true }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default All;\r\n","import { PageHeader, Table, Tag } from \"antd\";\r\nimport React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { ComplexTypes, EnumType, NamedType } from \"../models/AvroSchema\";\r\nimport { EnumColumns, EnumData } from \"../models/TableColumns\";\r\nimport { TagColorPicker } from \"../utils/TagColorPicker\";\r\n\r\ninterface PropsType {\r\n    schema: NamedType;\r\n}\r\n\r\nconst Enum = (props: PropsType): JSX.Element => {\r\n    const schema = props.schema as EnumType;\r\n    let i = -1;\r\n\r\n    const enumName = schema.name.substring(schema.name.lastIndexOf(\".\") + 1);\r\n\r\n    const rows: EnumData[] = schema.symbols.map((symbol) => {\r\n        i++;\r\n        return {\r\n            option: {\r\n                title: symbol,\r\n                default: symbol === schema.default,\r\n            },\r\n            key: i.toString(),\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div style={{ padding: \"24px\" }}>\r\n            <PageHeader\r\n                title={enumName}\r\n                tags={<Tag color={TagColorPicker.pick(ComplexTypes.ENUM)}>{ComplexTypes.ENUM.toUpperCase()}</Tag>}\r\n                style={{\r\n                    paddingLeft: 0,\r\n                }}\r\n            />\r\n            <p>Fully qualified name: <strong>{schema.namespace}.{schema.name}</strong></p>\r\n            <code><ReactMarkdown linkTarget=\"_blank\">{schema.doc || \"\"}</ReactMarkdown></code>\r\n            <Table bordered columns={EnumColumns} dataSource={rows} pagination={false} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Enum;\r\n","import {\r\n    ArrayType,\r\n    AvroSchema,\r\n    ComplexType,\r\n    EnumType,\r\n    LogicalType,\r\n    MapType,\r\n    RecordType,\r\n    NamedType,\r\n} from \"../models/AvroSchema\";\r\n\r\nexport class AvroTypeHelper {\r\n\r\n    public static isRecordType(schema: AvroSchema): schema is RecordType {\r\n        if (typeof schema === \"string\" || schema instanceof Array) {\r\n            return false;\r\n        }\r\n        return schema.type === \"record\";\r\n    }\r\n\r\n    public static isArrayType(schema: AvroSchema): schema is ArrayType {\r\n        if (typeof schema === \"string\" || schema instanceof Array) {\r\n            return false;\r\n        }\r\n        return schema.type === \"array\";\r\n    }\r\n\r\n    public static isMapType(schema: AvroSchema): schema is MapType {\r\n        if (typeof schema === \"string\" || schema instanceof Array) {\r\n            return false;\r\n        }\r\n\r\n        return schema.type === \"map\";\r\n    }\r\n\r\n    public static isEnumType(schema: NamedType | AvroSchema): schema is EnumType {\r\n        return schema.type === \"enum\";\r\n    }\r\n\r\n    public static isUnion(schema: AvroSchema): schema is ComplexType {\r\n        return schema instanceof Array;\r\n    }\r\n\r\n    public static isLogicalType(schema: AvroSchema): schema is LogicalType {\r\n        if (typeof schema === \"string\" || schema instanceof Array) {\r\n            return false;\r\n        }\r\n        return \"logicalType\" in schema;\r\n    }\r\n}\r\n","import { Type, RecordType, NamedType, ComplexType, MapType, AvroSchema } from \"../models/AvroSchema\";\r\nimport { AvroTypeHelper } from \"./AvroTypeHelper\";\r\n\r\nexport class CustomAvroParser {\r\n\r\n    public static getNamedTypes(schemaContent: string): NamedType {\r\n        const schema: NamedType = JSON.parse(schemaContent);\r\n        return schema;\r\n    }\r\n\r\n    public static extractExternalTypes(schema: ComplexType, outMap: Map<string, Type>, parentNamespace: string): void {\r\n        if (!schema) {\r\n            return;\r\n        }\r\n\r\n        if (AvroTypeHelper.isRecordType(schema) && schema.fields) {\r\n            if (outMap.has(`${schema.namespace || parentNamespace}.${schema.name}`)) { // circular dependency\r\n                return;\r\n            }\r\n\r\n            CustomAvroParser.addNamespaceIfNeeded(schema, parentNamespace);\r\n            outMap.set(`${schema.namespace}.${schema.name}`, schema);\r\n            schema.fields.map(field => {\r\n                if (field.type && typeof field.type !== \"string\") {\r\n                    const complexType = field.type as AvroSchema;\r\n                    if (AvroTypeHelper.isRecordType(complexType)) {\r\n                        CustomAvroParser.addNamespaceIfNeeded(complexType, parentNamespace);\r\n                        CustomAvroParser.extractExternalTypes(complexType, outMap, complexType.namespace);\r\n                    } else if (AvroTypeHelper.isEnumType(complexType)) {\r\n                        CustomAvroParser.addNamespaceIfNeeded(complexType, parentNamespace);\r\n                        outMap.set(`${complexType.namespace}.${complexType.name}`, complexType);\r\n                    } else if (AvroTypeHelper.isArrayType(complexType) && typeof complexType.items !== \"string\") {\r\n                        const arrayType = complexType.items as NamedType;\r\n                        CustomAvroParser.addNamespaceIfNeeded(arrayType, parentNamespace);\r\n                        CustomAvroParser.extractExternalTypes(complexType.items as RecordType, outMap, arrayType.namespace);\r\n                    } else if (AvroTypeHelper.isUnion(complexType)) {\r\n                        const unionType = complexType as unknown as Type[];\r\n                        for (let i = 0; i < unionType.length; i++) {\r\n                            if (typeof unionType[i] !== \"string\") {\r\n                                const childUnionType = unionType[i] as NamedType;\r\n                                CustomAvroParser.addNamespaceIfNeeded(childUnionType, parentNamespace);\r\n                                CustomAvroParser.extractExternalTypes(childUnionType as RecordType, outMap, childUnionType.namespace);\r\n                            }\r\n                        }\r\n                    } else if (AvroTypeHelper.isMapType(complexType) && typeof complexType.values !== \"string\") {\r\n                        const mapType = complexType as MapType;\r\n                        // @ts-ignore\r\n                        if (mapType.values && mapType.values.name) {\r\n                            // @ts-ignore\r\n                            CustomAvroParser.addNamespaceIfNeeded(mapType.values, parentNamespace);\r\n                        }\r\n                        CustomAvroParser.extractExternalTypes(mapType.values as ComplexType, outMap, parentNamespace);\r\n                    }\r\n                }\r\n            });\r\n        } else if (AvroTypeHelper.isEnumType(schema)) {\r\n            CustomAvroParser.addNamespaceIfNeeded(schema, parentNamespace);\r\n            outMap.set(`${schema.namespace}.${schema.name}`, schema);\r\n        }\r\n    }\r\n\r\n    // If namespace is the same, avro omits it, we duplicate it becuase we need it :-D\r\n    public static addNamespaceIfNeeded(type: NamedType, defaultNamespace: string): void {\r\n        if (!type.namespace || !type.namespace.length) {\r\n            type.namespace = defaultNamespace;\r\n        }\r\n    }\r\n}\r\n","import { PageHeader, Table, Tag } from \"antd\";\r\nimport React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { AvroSchema, ComplexTypes, NamedType, RecordType, Type } from \"../models/AvroSchema\";\r\nimport { RowData, RecordColumns } from \"../models/TableColumns\";\r\nimport { AvroTypeHelper } from \"../utils/AvroTypeHelper\";\r\nimport { CustomAvroParser } from \"../utils/CustomAvroParser\";\r\nimport { TagColorPicker } from \"../utils/TagColorPicker\";\r\n\r\ninterface PropsType {\r\n    schema: {\r\n        base: NamedType;\r\n        current: NamedType;\r\n    };\r\n    sourceItemName: string | undefined;\r\n}\r\n\r\nconst Record = (props: PropsType): JSX.Element => {\r\n    // If a custom type appears more than once in the schema, only the first appearance of it will have all the details.\r\n    const schema = props.schema.current as RecordType;\r\n    const baseNamespace = schema.namespace;\r\n    const externalTypes: Map<string, Type> = new Map();\r\n    CustomAvroParser.extractExternalTypes(props.schema.base as RecordType, externalTypes, props.schema.base.namespace);\r\n\r\n    const rows: RowData[] = schema.fields.map(field => {\r\n        if (field && typeof field.type === \"string\") {\r\n            // @ts-ignore\r\n            if (field.type === schema.name && !field.namespace) {\r\n                // Circular Dependency. Intentionally leaving the type definition out.\r\n            } else if (field.type.indexOf(\".\") > -1 && externalTypes.has(field.type)) {\r\n                // @ts-ignore\r\n                field.type = externalTypes.get(field.type);\r\n            } else if (externalTypes.has(`${baseNamespace}.${field.type}`)) {\r\n                // @ts-ignore\r\n                field.type = externalTypes.get(`${baseNamespace}.${field.type}`);\r\n            }\r\n        } else if (field && AvroTypeHelper.isUnion(field.type as AvroSchema)) {\r\n            const unionType = field.type as unknown as Type[];\r\n            for (let index = 0; index < unionType.length; index++) {\r\n                // @ts-ignore\r\n                const type = field.type[index];\r\n                if (typeof type === \"string\") {\r\n                    // @ts-ignore\r\n                    if (type === schema.name && !type.namespace) {\r\n                        // Circular Dependency. Intentionally leaving the type definition out.\r\n                    } else if (type.indexOf(\".\") > -1 && externalTypes.has(type)) {\r\n                        // @ts-ignore\r\n                        field.type[index] = externalTypes.get(type);\r\n                    } else if (externalTypes.has(`${baseNamespace}.${type}`)) {\r\n                        // @ts-ignore\r\n                        field.type[index] = externalTypes.get(`${baseNamespace}.${type}`);\r\n                    }\r\n                }\r\n            }\r\n        } else if (field && AvroTypeHelper.isArrayType(field.type as AvroSchema)) {\r\n            // @ts-ignore\r\n            const type = field.type.items;\r\n            if (typeof type === \"string\") {\r\n                // @ts-ignore\r\n                if (type === schema.name && !type.namespace) {\r\n                    // Circular Dependency. Intentionally leaving the type definition out.\r\n                } else if (type.indexOf(\".\") > -1 && externalTypes.has(type)) {\r\n                    // @ts-ignore\r\n                    field.type.items = externalTypes.get(type);\r\n                } else if (externalTypes.has(`${baseNamespace}.${type}`)) {\r\n                    // @ts-ignore\r\n                    field.type.items = externalTypes.get(`${baseNamespace}.${type}`);\r\n                }\r\n            }\r\n        } else if (field && AvroTypeHelper.isMapType(field.type as AvroSchema)) {\r\n            // @ts-ignore\r\n            const type = field.type.values;\r\n            if (typeof type === \"string\") {\r\n                // @ts-ignore\r\n                if (type === schema.name && !type.namespace) {\r\n                    // Circular Dependency. Intentionally leaving the type definition out.\r\n                } else if (type.indexOf(\".\") > -1 && externalTypes.has(type)) {\r\n                    // @ts-ignore\r\n                    field.type.values = externalTypes.get(type);\r\n                } else if (externalTypes.has(`${baseNamespace}.${type}`)) {\r\n                    // @ts-ignore\r\n                    field.type.values = externalTypes.get(`${baseNamespace}.${type}`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            sourceItemName: props.sourceItemName ? props.sourceItemName : `${schema.namespace}.${schema.name}`,\r\n            defaultNamespace: baseNamespace,\r\n            name: field.name,\r\n            type: field.type,\r\n            defaultValue: field.default === undefined ? \"\" : JSON.stringify(field.default),\r\n            doc: field.doc,\r\n        };\r\n    });\r\n\r\n    let i = 0;\r\n\r\n    return (\r\n        <div style={{ padding: \"24px\" }}>\r\n            <PageHeader\r\n                title={schema.name}\r\n                tags={<Tag color={TagColorPicker.pick(ComplexTypes.RECORD)}>{ComplexTypes.RECORD.toUpperCase()}</Tag>}\r\n                style={{\r\n                    paddingLeft: 0,\r\n                }}\r\n            />\r\n            <p>Fully qualified name: <strong>{schema.namespace}.{schema.name}</strong></p>\r\n            <code><ReactMarkdown linkTarget=\"_blank\">{schema.doc || \"\"}</ReactMarkdown></code>\r\n            {<Table bordered rowKey={() => (i++)} columns={RecordColumns} dataSource={rows} pagination={false} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Record;\r\n","export default __webpack_public_path__ + \"static/media/error.fdf679d2.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport Enum from \"./components/Enum\";\r\nimport Record from \"./components/Record\";\r\nimport errorImage from \"./error.png\";\r\nimport loading from \"./loading.png\";\r\nimport { NamedType, Type } from \"./models/AvroSchema\";\r\nimport { AvroTypeHelper } from \"./utils/AvroTypeHelper\";\r\nimport { CustomAvroParser } from \"./utils/CustomAvroParser\";\r\n\r\nconst Item = (): JSX.Element => {\r\n    const { item } = useParams<{ item: string }>();\r\n    const [schema, setSchema] = useState<{\r\n        base: NamedType,\r\n        current: NamedType,\r\n    }>();\r\n    const externalTypes: Map<string, Type> = new Map();\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const queryString = new URLSearchParams(useLocation().search);\r\n    const source = queryString.get(\"source\") || undefined;\r\n\r\n    const filePath = `${(source ? source : item).replaceAll(\".\", \"/\")}.avsc`;\r\n\r\n    const fetchSchema = async () => {\r\n        try {\r\n            const schemaContent = await fetch(\r\n                `${process.env.PUBLIC_URL}/avro/${filePath}`,\r\n                {\r\n                    headers : {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Accept\": \"application/json\",\r\n                    },\r\n                },\r\n            );\r\n\r\n            const fetchedSchema = CustomAvroParser.getNamedTypes(await schemaContent.text());\r\n\r\n            if (source) {\r\n                // @ts-ignore\r\n                CustomAvroParser.extractExternalTypes(fetchedSchema, externalTypes, fetchedSchema.namespace);\r\n                setSchema({\r\n                    base: fetchedSchema,\r\n                    // @ts-ignore\r\n                    current: externalTypes.get(item),\r\n                });\r\n            } else {\r\n                setSchema({\r\n                    base: fetchedSchema,\r\n                    current: fetchedSchema,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    useEffect((): void => {\r\n        fetchSchema();\r\n    }, [item]);\r\n\r\n    if (schema && schema.current && schema.current.name) {\r\n        if (AvroTypeHelper.isEnumType(schema.current)) {\r\n            return <Enum schema={schema.current} />;\r\n        } else {\r\n            return <Record schema={schema} sourceItemName={source} />;\r\n        }\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div>\r\n                <img src={errorImage} alt=\"Error Loading\" />\r\n                <p style={{ fontWeight: 900 }}>Schema not found!</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <img src={loading} className=\"App-logo\" alt=\"loading...\" />;\r\n};\r\n\r\nexport default Item;\r\n","import { Layout } from \"antd\";\r\n\r\nconst AppFooter = (): JSX.Element => {\r\n    const { Footer } = Layout;\r\n    return (\r\n        <Footer style={{\r\n            textAlign: \"center\",\r\n            borderTop: \"1px solid navy\",\r\n            padding: \"0\",\r\n        }}>\r\n            Avro Docs React\r\n        </Footer>\r\n    );\r\n};\r\n\r\nexport default AppFooter;\r\n","export default __webpack_public_path__ + \"static/media/logo.46066d9c.png\";","import { Layout, Select } from \"antd\";\r\nimport { Link, useHistory, useParams, useLocation } from \"react-router-dom\";\r\nimport { useDataContext } from \"../context/data\";\r\nimport logo from \"./logo.png\";\r\n\r\nconst AppHeader = (): JSX.Element => {\r\n    const { Header } = Layout;\r\n    const { Option, OptGroup } = Select;\r\n    const [appData] = useDataContext();\r\n    const history = useHistory();\r\n    const { item } = useParams<{ item: string }>();\r\n    const location = useLocation();\r\n\r\n    const selectionHandler = (value) => {\r\n        history.push(`/${value}`);\r\n    };\r\n    const changeHandler = (value) => {\r\n        if (value === undefined && location.pathname !== \"/\") {\r\n            history.push(\"/\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Header>\r\n            <div style={{ float: \"left\" }}>\r\n                <Link to=\"/\">\r\n                    <h1 style={{ color: \"#ffffff\" }}>\r\n                        <img src={logo} style={{ width: \"50px\", marginRight: \"15px\" }} alt=\"logo\" />\r\n                        Avro Docs React\r\n                    </h1>\r\n                </Link>\r\n            </div>\r\n            <div style={{ float: \"right\" }}>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: 600 }}\r\n                    placeholder=\"Select a schema\"\r\n                    onSelect={selectionHandler}\r\n                    onChange={changeHandler}\r\n                    allowClear={true}\r\n                    defaultActiveFirstOption={false}\r\n                    disabled={appData.schemas.length === 0}\r\n                    value={item}\r\n                    filterOption={(input, option) => (\r\n                        option?.value?.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    )}\r\n                >\r\n                    {\r\n                        Array.from(appData.namespaceTree.keys()).map(key => {\r\n                            return (\r\n                                <OptGroup key={key} label={<h3>{key}</h3>}>\r\n                                    {appData.namespaceTree.get(key)?.map(val => <Option key={`${key}.${val}`} value={`${key}.${val}`}>{val}</Option>)}\r\n                                </OptGroup>\r\n                            );\r\n                        })\r\n                    }\r\n                </Select>\r\n            </div>\r\n        </Header>\r\n    );\r\n};\r\n\r\nexport default AppHeader;\r\n","import { Layout, Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDataContext } from \"../context/data\";\r\nimport AppFooter from \"./AppFooter\";\r\nimport AppHeader from \"./AppHeader\";\r\n\r\ninterface PropsType {\r\n    children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nconst AppLayout = (props: PropsType): JSX.Element => {\r\n    const { Content, Sider } = Layout;\r\n    const { SubMenu } = Menu;\r\n    const [appData] = useDataContext();\r\n    const params = useParams<{ item?: string }>();\r\n    const item = params.item || \"\";\r\n\r\n    return (\r\n        <Layout>\r\n            <AppHeader />\r\n            <Layout style={{\r\n                height: \"calc(100vh - 88px)\",\r\n            }}>\r\n                <Sider className=\"sider-layout\" width={300}>\r\n                    <Menu\r\n                        mode=\"inline\"\r\n                        theme=\"dark\"\r\n                        forceSubMenuRender={true}\r\n                        inlineCollapsed={false}\r\n                        defaultSelectedKeys={[item]}\r\n                        defaultOpenKeys={[item.substring(0, item.lastIndexOf(\".\"))]}\r\n                    >\r\n                        {Array.from(appData.namespaceTree.keys()).map(key => {\r\n                            return (\r\n                                <SubMenu key={key} title={key}>\r\n                                    {\r\n                                        // @ts-ignore\r\n                                        appData.namespaceTree.get(key).map(child => {\r\n                                            const childKey = `${key}.${child}`;\r\n                                            return (\r\n                                                <Menu.Item key={childKey}>\r\n                                                    <Link to={`/${childKey}`}>{child}</Link>\r\n                                                </Menu.Item>\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </SubMenu>\r\n                            );\r\n                        })}\r\n                    </Menu>\r\n                </Sider>\r\n                <Content className=\"content-layout\">\r\n                    {props.children}\r\n                </Content>\r\n            </Layout>\r\n            <AppFooter />\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default AppLayout;\r\n","import {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport All from \"./All\";\r\nimport Item from \"./Item\";\r\nimport AppLayout from \"./components/AppLayout\";\r\nimport { DataProvider } from \"./context/data\";\r\nimport \"./App.css\";\r\n\r\nexport default function App(): JSX.Element {\r\n    return (\r\n        <Router>\r\n            <DataProvider>\r\n                <Switch>\r\n                    <Route path=\"/:item\">\r\n                        <AppLayout>\r\n                            <Item />\r\n                        </AppLayout>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <AppLayout>\r\n                            <All />\r\n                        </AppLayout>\r\n                    </Route>\r\n                </Switch>\r\n            </DataProvider>\r\n        </Router>\r\n    );\r\n}\r\n","/* eslint-disable */\r\nimport { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}